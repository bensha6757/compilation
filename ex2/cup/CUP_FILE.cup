/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;

parser code 
{:
	public Lexer lexer;

	public Parser(Lexer lexer)
	{
		super(lexer);
		this.lexer = lexer;
	}
	public void report_error(String message, Object info)
	{
		System.out.print("ERROR >> ");
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getCharPos());
		System.out.print("] ");
		System.out.print(message + " " + info);
		System.out.println("My message:" + message);
		throw new IllegalStateException("ERROR("+lexer.getLine()+")\n");
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
    s = lexer.next_token();
    if (s.sym == TokenNames.ERROR) {
        throw new IllegalArgumentException("ERROR\n");
    }
	//System.out.print(s);
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/
terminal IF;
terminal EQ;
terminal DOT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal WHILE;
terminal DIVIDE;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal SEMICOLON;
terminal ASSIGN;
terminal TYPE_STRING;
terminal TYPE_INT;
terminal TYPE_VOID;
terminal NEW;
terminal LT;
terminal GT;
terminal RETURN;
terminal NIL;
terminal ARRAY;
terminal COMMA;
terminal CLASS;
terminal EXTENDS;
terminal ERROR;

/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;
terminal String STRING;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_EXP exp;
non terminal AST_VAR var;
non terminal AST_STMT stmt;
non terminal AST_STMT_LIST stmtList;
non terminal AST_PROGRAM Program;
non terminal AST_DEC dec;
non terminal AST_VARDEC varDec;
non terminal AST_NEWEXP newExp;
non terminal AST_BINOP BINOP;
non terminal AST_EXP_LIST expList;
non terminal AST_CFIELD cField;
non terminal AST_FUNCDEC funcDec;
non terminal AST_CLASSDEC classDec;
non terminal AST_ARRAYTYPEDEF arrayTypedef;
non terminal AST_TYPE type;
non terminal AST_TYPEID_LIST TypeIDList;
non terminal AST_CFIELD_LIST cFieldList;
non terminal AST_DEC_LIST decList;
non terminal AST_EXP_C expC;

/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence nonassoc ASSIGN;
precedence left EQ;
precedence left LT, GT;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence nonassoc LBRACK;
precedence nonassoc LPAREN, RPAREN;
precedence left DOT;
/************************/
/* START WITH: stmtList */
/************************/
start with Program;

/********************/
/* DERIVATION RULES */
/********************/

stmtList	::=		stmt:s	stmtList:l		{: RESULT = new AST_STMT_LIST(s,l);    :}
					| stmt:s				{: RESULT = new AST_STMT_LIST(s,null); :}
					;

expList	    ::=		exp:e COMMA	expList:l		{: RESULT = new AST_EXP_LIST(e,l);    :}
					| exp:e				        {: RESULT = new AST_EXP_LIST(e,null); :}
					;

expC	    ::=		exp:e                    	{: RESULT = new AST_EXP_C(e);    :}
					;

TypeIDList	::=		    type:t 	ID:name COMMA TypeIDList:l		{: RESULT = new AST_TYPEID_LIST(t,name,l);:}
					    | type:t ID:name				        {: RESULT = new AST_TYPEID_LIST(t,name,null); :}
					    ;

decList	::=		        dec:d 	decList:l		    {: RESULT = new AST_DEC_LIST(d, l);:}
					    | dec:d				        {: RESULT = new AST_DEC_LIST(d, null); :}
					    ;

cFieldList	       ::=	cField:c cFieldList:l  {: RESULT = new AST_CFIELD_LIST(c,l);    :}
                        | cField:c				{: RESULT = new AST_CFIELD_LIST(c,null); :}
                        ;

Program     ::=     decList:l                              {: RESULT = new AST_PROGRAM_DEC(l);:}
                    ;

dec         ::=     varDec:vd                           {: RESULT = new AST_DEC_VARDEC(vd);:}
                    | funcDec:fd                        {: RESULT = new AST_DEC_FUNCDEC(fd);:}
                    | classDec:cd                       {: RESULT = new AST_DEC_CLASSDEC(cd);:}
                    | arrayTypedef:atd                  {: RESULT = new AST_DEC_ARRAYTYPEDEF(atd);:}
                    ;

type         ::=     TYPE_INT                           {: RESULT = new AST_TYPE_BINOP(0);:}
                    | TYPE_STRING                       {: RESULT = new AST_TYPE_BINOP(1);:}
                    | TYPE_VOID                         {: RESULT = new AST_TYPE_BINOP(2);:}
                    | ID:typeName						{: RESULT = new AST_TYPE_SIMPLE(typeName);:}
                    ;

arrayTypedef  ::=    ARRAY ID:arrayName EQ type:t LBRACK RBRACK SEMICOLON      {: RESULT = new AST_ARRAYTYPEDEF_ID(arrayName,t);:}
                    ;

varDec        ::=     type:t ID:varName ASSIGN exp:e SEMICOLON     {: RESULT = new AST_VARDEC_TYPEEXP(t,varName,e);:}
                      | type:t ID:varName SEMICOLON                {: RESULT = new AST_VARDEC_TYPEEXP(t,varName, null);:}
                      | type:t ID:varName ASSIGN newExp:ne SEMICOLON      {: RESULT = new AST_VARDEC_TYPEEXP(t,varName,ne);:}
                      ;

funcDec        ::=     type:t ID:funcName LPAREN TypeIDList:l RPAREN LBRACE stmtList:sl RBRACE       {: RESULT = new AST_FUNCDEC_STMT(t,funcName,l,sl);:}
                      | type:t ID:funcName LPAREN RPAREN LBRACE stmtList:sl RBRACE               {: RESULT = new AST_FUNCDEC_STMT(t,funcName,null,sl);:}
                      ;

classDec        ::=   CLASS ID:className EXTENDS ID:parentClassName LBRACE cFieldList:l RBRACE       {: RESULT = new AST_CLASSDEC_CFIELD(className,parentClassName,l);:}
                      | CLASS ID:className LBRACE cFieldList:l RBRACE                                {: RESULT = new AST_CLASSDEC_CFIELD(className,null,l);:}
                      ;

exp			::=		INT:i							            	{: RESULT = new AST_EXP_INT(i);          :}
                    | MINUS INT:i                                   {: RESULT = new AST_EXP_INT(-i);         :}
                    | NIL       					            	{: RESULT = new AST_EXP_NIL();           :}
                    | STRING:str                                    {: RESULT = new AST_EXP_STRING(str);     :}
					| var:v							            	{: RESULT = new AST_EXP_VAR(v);          :}
					| exp:e1 PLUS  exp:e2			            	{: RESULT = new AST_EXP_BINOP(e1, e2, 0);:}
					| exp:e1 MINUS exp:e2				            {: RESULT = new AST_EXP_BINOP(e1, e2, 1);:}
					| exp:e1 TIMES exp:e2				            {: RESULT = new AST_EXP_BINOP(e1, e2, 2);:}
					| exp:e1 DIVIDE exp:e2				            {: RESULT = new AST_EXP_BINOP(e1, e2, 3);:}
					| exp:e1 LT exp:e2				                {: RESULT = new AST_EXP_BINOP(e1, e2, 4);:}
					| exp:e1 GT exp:e2				                {: RESULT = new AST_EXP_BINOP(e1, e2, 5);:}
					| exp:e1 EQ exp:e2			                    {: RESULT = new AST_EXP_BINOP(e1, e2, 6);:}
					| var:v DOT ID:name LPAREN expList:body RPAREN  {: RESULT = new AST_EXP_FUNC(v, name, body);:}
					| ID:name LPAREN expList:body RPAREN            {: RESULT = new AST_EXP_FUNC(null, name, body);:}
					| var:v DOT ID:name LPAREN  RPAREN              {: RESULT = new AST_EXP_FUNC(v, name, null);:}
					| ID:name LPAREN RPAREN                         {: RESULT = new AST_EXP_FUNC(null, name, null);:}
					| LPAREN expC:e RPAREN                           {: RESULT = new AST_EXP_C(e);          :}
					;

var			::=		ID:name								{: RESULT = new AST_VAR_SIMPLE(name);       :}
					| var:v DOT ID:fieldName			{: RESULT = new AST_VAR_FIELD(v,fieldName); :}
					| var:v LBRACK exp:e RBRACK			{: RESULT = new AST_VAR_SUBSCRIPT(v,e);     :}
					;

stmt		::=		varDec:vd                                                   {: RESULT = new AST_STMT_VARDEC(vd);         :}
                    | var:v ASSIGN exp:e SEMICOLON								{: RESULT = new AST_STMT_ASSIGN(v,e);      :}
                    | var:v ASSIGN newExp:ne SEMICOLON							{: RESULT = new AST_STMT_ASSIGN(v,ne);     :}
                    | RETURN exp:e SEMICOLON                                    {: RESULT = new AST_STMT_RETURN(e);        :}
                    | RETURN SEMICOLON                                          {: RESULT = new AST_STMT_RETURN(null);     :}
					| IF    LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_IF(   cond,body); :}
					| WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(cond,body); :}
					| var:v DOT ID:name LPAREN expList:body RPAREN SEMICOLON    {: RESULT = new AST_STMT_FUNC(v, name, body);:}
                    | ID:name LPAREN expList:body RPAREN SEMICOLON              {: RESULT = new AST_STMT_FUNC(null, name, body);:}
                    | var:v DOT ID:name LPAREN  RPAREN SEMICOLON                {: RESULT = new AST_STMT_FUNC(v, name, null);:}
                    | ID:name LPAREN RPAREN SEMICOLON                           {: RESULT = new AST_STMT_FUNC(null, name, null);:}
					;

newExp      ::=     NEW type:t                        {: RESULT = new AST_NEWEXP_NEW(t, null);:}
                    | NEW type:t LBRACK exp:e RBRACK  {: RESULT = new AST_NEWEXP_NEW(t, e);:}
                    ;

cField      ::=     varDec:vd                          {: RESULT = new AST_CFIELD_VARDEC(vd);:}
                    | funcDec:fd                       {: RESULT = new AST_CFIELD_FUNCDEC(fd);:}
                    ;
